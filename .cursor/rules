# Project Rules

## Branch Strategy
- main: Production-ready code
- develop: Integration branch
- feature/*: New features
- bugfix/*: Bug fixes
- hotfix/*: Urgent fixes

## Commit Message Format
type(scope): description

Types:
- feat: New feature
- fix: Bug fix
- docs: Documentation
- style: Formatting
- refactor: Code restructuring
- test: Testing
- chore: Maintenance

## Code Review Requirements
- Minimum 1 reviewer
- All tests must pass
- No linting errors
- Documentation updated
- Branch up to date

## Documentation Updates
- Daily: activeContext.md
- Weekly: progress.md
- Per Sprint: All memory bank files
- Per Release: systemPatterns.md and techContext.md

## Development Patterns
1. Component Structure
   - Single responsibility
   - Clear interfaces
   - Proper documentation
   - Unit tests

2. State Management
   - Centralized store
   - Immutable updates
   - Action creators
   - Selectors

3. Error Handling
   - Try-catch blocks
   - Error boundaries
   - Logging
   - User feedback

4. Logging Standards
   - Consistent format
   - Appropriate levels
   - Context included
   - Performance impact

## User Preferences
1. Documentation
   - Markdown format
   - Mermaid diagrams
   - Clear structure
   - Regular updates

2. Code Style
   - ESLint configuration
   - Prettier formatting
   - TypeScript strict
   - Consistent naming

3. Review Process
   - Pull request template
   - Checklist items
   - Automated checks
   - Quick feedback

4. Deployment Process
   - Staging environment
   - Automated testing
   - Rollback plan
   - Monitoring

## Project Intelligence
1. Critical Paths
   - Documentation updates
   - Code review process
   - Testing requirements
   - Deployment workflow

2. Known Challenges
   - Documentation maintenance
   - Workflow adoption
   - Technical debt
   - Team coordination

3. Evolution Notes
   - Initial setup: [Current Date]
   - Documentation system established
   - Development workflow defined
   - Next phase: Environment setup 